/**
 * ------------------ Production Rules (BNF Grammer )  -----------------------
 *
 * exp ::= number
 *       | string                                                            // literal string
 *       | number                                                            // literal number
 *       | [+ number, number]                                                // addition operation (+ binary operator)
 *       | [+ exp, exp]                                                      // recursive descent
 *       | [var name, exp]                                                   // variable declaration
 *       | [set name, exp]                                                   // variable re-assigning (assignment operator)
 *       | name                                                              // variable accessing
 *       | [begin exp]                                                       // block scope (function block, block scope)
 *       | [if <condition> <consequent> <alternate>]                         // if block
 *       | [while <condition> <block>                                        // while block
 */


/*
* S-expression
* Atom: 42, foo, bar, "Hello World"
* List: (), (+ 1 2), (print "Hello")
*/


// ---------- Lexical Grammar --------------------------

%lex

%%


\/\/.*            /* skip comments */
\/\*[\s\S]*?\*\/  /* skip comments */

\s+                 /* skip whitespace */

\"[^\"]*\"          return 'STRING'
\d+                 return 'NUMBER'
[\w\-+*=<>/:,!]+  return 'SYMBOL'

/lex

// ------------ Syntactics grammar (BNF) -----------------
%%

Exp
    : Atom
    | List
    ;

Atom
    : NUMBER { $$ = Number($1) }
    | STRING
    | SYMBOL
    ;

List
    : '(' ListEntries ')' { $$ = $2 }
    ;

// (exp exp ...)
ListEntries
    : ListEntries Exp   { $1.push($2); $$ = $1 }
    | /* empty */       { $$ = [] }
    ;

